#!/bin/bash
# vim: set ft=sh

set -e

pidfile=/var/vcap/sys/run/bpm/haproxy/haproxy.pid
sockfile=/var/vcap/sys/run/haproxy/stats.sock
logfile=/var/vcap/sys/log/haproxy/drain.log

<% if not p("ha_proxy.drain_enable") -%>
echo "drain is disabled" >> ${logfile}
echo 0
exit 0
<% else -%>
mkdir -p "$(dirname ${logfile})"

if [[ ! -f ${pidfile} ]]; then
  echo "$(date): pidfile does not exist" >> ${logfile}
  echo 0
  exit 0
fi

pid="$(cat ${pidfile})"
pid_exists=$(ps -p ${pid} | tail -n +2)

if [ "${pid_exists}" = '' ]; then
  # In case haproxy_wrapper process is stale, pid_exists will be empty,
  # the drain job should not fail
  echo "$(date): There was no master process for haproxy_wrapper." >> ${logfile}
  echo 0
  exit 0
fi

haproxy_wrapper_pid=$(pgrep -P "$pid" haproxy_wrapper)
<%-  if p("ha_proxy.syslog_server") == "stdout" || p("ha_proxy.syslog_server") == "stderr" -%>
haproxy_master_pid=$(pgrep -P "$haproxy_wrapper_pid" -x haproxy)
<%- else -%>
haproxy_master_pid=$(pgrep -P "$pid" -x haproxy)
<%- end -%>

<%- if p("ha_proxy.enable_health_check_http") -%>
echo "disable frontend health_check_http_url" | /usr/local/bin/socat stdio unix-connect:${sockfile}
echo "$(date): triggering grace period for process ${haproxy_master_pid}" >> ${logfile}
sleep <%= p("ha_proxy.drain_frontend_grace_time") -%>
<%- end -%>

kill -USR1 "${haproxy_master_pid}"
echo "$(date): triggering drain for process ${haproxy_master_pid}" >> ${logfile}

echo <%= p("ha_proxy.drain_timeout") -%>

<%- end -%>
